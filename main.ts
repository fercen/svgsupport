// Rollercoaster

let rollercoaster = Snap("#rollercoaster");

let text = rollercoaster.select("textPath");

let rollercoasterStatus = false;

let rollercoasterAnimate = function() {
    let target = "70%";

    if(rollercoasterStatus){
        target = "30%";
    }

    text.animate({
        startOffset: target
    }, 1000, mina.easeinout, rollercoasterAnimate);
    rollercoasterStatus = !rollercoasterStatus;
};

rollercoasterAnimate();


let ants = Snap("#ants");

let antsText = ants.select("text");

let antsAnimate = function () {
    antsText.attr({strokeDashoffset: 0});
    antsText.animate({
        strokeDashoffset: 30
    }, 1000, mina.linear, antsAnimate);
};

antsAnimate();

const polylineSvg = Snap("#polyline");
const polyline = polylineSvg.select("polyline");

let polylineStatus = false;

const polylineAnimate = function () {
    let target = "5,125 75,25 145,125";
    if(polylineStatus){
        target = "25,25 50,150 75,10";
    }
    polyline.animate({
        points: target
    }, 2000, mina.elastic, polylineAnimate);
    polylineStatus = !polylineStatus;
};

polylineAnimate();


const curves = ["m 18.687822,106.56344 c 7.071068,17.67767 19.950513,32.07234 38.385797,29.29442 C 75.508903,133.07994 88.388348,113.38197 85.35789,102.27029 82.327433,91.158614 73.993674,79.54186 58.33631,72.72333 42.678945,65.904801 28.536809,52.267741 32.57742,39.893372 36.61803,27.519004 52.022856,15.902249 65.659916,15.144635 79.296975,14.387021 86.873119,22.215703 94.449263,33.327381"
    , "m 17.080679,16.742011 c 18.856783,0.891956 34.207063,35.97853 39.814368,53.758706 8.078142,25.614937 11.141415,66.769573 11.141415,66.769573 5.309326,0.7814 19.011642,-31.36934 26.72842,-57.939817 6.609318,-22.757266 11.892728,-51.285371 3.883966,-53.722815 -12.453365,-3.790145 -2.832953,13.215622 10.761062,14.536978 5.06563,0.492385 13.53464,-1.500362 32.71792,-18.424398"
    , "M 113.68782,23.527725 C 109.50889,10.848253 86.220422,3.8916674 69.573618,11.929288 48.599015,22.056513 35.652941,39.606759 32.85789,59.948861 c -2.422392,17.629934 -1.7162,69.476099 24.942706,76.881609 6.78789,1.88559 34.472586,-1.56826 42.812534,-17.29424 11.24054,-21.195372 12.71777,-42.521782 9.86821,-46.713023 -2.77927,-4.087854 -52.179647,-7.393219 -37.10351,18.539888"];

const pathSvg = Snap("#jsMorph");
const path = pathSvg.select("path");

let index = 0;

const pathAnimate = function () {
    let target = curves[index];

    path.animate({
        d: target
    }, 750, mina.easeinout, pathAnimate);
    index++;
    index %= curves.length;
};

pathAnimate();


const beatingSvg = Snap("#beating");
const circle = beatingSvg.select("circle");
const image = beatingSvg.select("image");
let beatStatus = false;
const beatAnimate = function () {
    if(!beatStatus){
        circle.animate({
            r: 50
        }, 1000, mina.easeinout);
        image.animate({
            width: 150,
            height: 150,
            x: -75,
            y: -75
        }, 1000, mina.easeinout);
    }else{
        circle.animate({
            r: 37.5
        }, 1000, mina.easeinout);
        image.animate({
            width: 75,
            height: 75,
            x: -37.5,
            y: -37.5
        }, 1000, mina.easeinout);
    }
    beatStatus = ! beatStatus;
};
setInterval(beatAnimate, 1000);

const initializeCanvas = function () {
    let canvas = document.querySelector("#canvas") as HTMLCanvasElement;
    let ctx = canvas.getContext('2d');
    ctx.font = "18px Arial";
    ctx.fillText("Canvas rendering", 5, 30);
    ctx.font = "60px Arial";
    ctx.fillText("OK!", 30, 90);


}();


let gradientOffset = Snap("#gradientOffset");

let gradientStop = gradientOffset.select("#offsetTweak");

let offsets = [10, 90];
let offsetsIndex = 0;
let offsetAnimate = function () {
    let curval = offsets[offsetsIndex];
    offsetsIndex++;
    offsetsIndex %= offsets.length;
    let nextval = offsets[offsetsIndex];
    Snap.animate(curval, nextval, function (val) {
        gradientStop.attr({offset: `${val}%`});
    }, 1000, mina.easeinout, offsetAnimate);
};
offsetAnimate();




const multicurves = ["M 75 7.6777344 C 65.704851 7.6777343 56.849146 9.5621003 48.794922 12.96875 C 40.740698 16.375399 33.487875 21.305093 27.396484 27.396484 C 21.305093 33.487875 16.3754 40.740697 12.96875 48.794922 C 9.5621003 56.849146 7.677735 65.704851 7.6777344 75 C 7.6777338 84.29515 9.5621005 93.15085 12.96875 101.20508 C 16.375399 109.2593 21.305093 116.51213 27.396484 122.60352 C 33.487876 128.69491 40.740697 133.6246 48.794922 137.03125 C 56.849146 140.4379 65.70485 142.32227 75 142.32227 C 84.29515 142.32227 93.150851 140.4379 101.20508 137.03125 C 109.2593 133.6246 116.51213 128.69491 122.60352 122.60352 C 128.69491 116.51213 133.6246 109.2593 137.03125 101.20508 C 140.4379 93.150851 142.32227 84.29515 142.32227 75 C 142.32227 65.70485 140.4379 56.849146 137.03125 48.794922 C 133.6246 40.740698 128.69491 33.487875 122.60352 27.396484 C 116.51213 21.305094 109.2593 16.375399 101.20508 12.96875 C 93.15085 9.5621004 84.29515 7.6777345 75 7.6777344 z M 75 21.460938 C 89.784135 21.460938 103.16893 27.45409 112.85742 37.142578 C 122.5459 46.831066 128.53906 60.215865 128.53906 75 C 128.53906 89.784136 122.54591 103.16893 112.85742 112.85742 C 103.16893 122.54591 89.784136 128.53906 75 128.53906 C 60.215865 128.53906 46.831066 122.5459 37.142578 112.85742 C 27.45409 103.16893 21.460937 89.784135 21.460938 75 C 21.460939 60.215866 27.45409 46.831066 37.142578 37.142578 C 46.831066 27.45409 60.215866 21.460938 75 21.460938 z M 75 37.876953 C 64.748737 37.876953 55.467961 42.032038 48.75 48.75 C 42.032039 55.467961 37.876954 64.748737 37.876953 75 C 37.876952 85.251264 42.032039 94.532041 48.75 101.25 C 55.467961 107.96796 64.748736 112.12305 75 112.12305 C 85.251264 112.12305 94.532042 107.96797 101.25 101.25 C 107.96797 94.532042 112.12305 85.251264 112.12305 75 C 112.12305 64.748736 107.96796 55.467961 101.25 48.75 C 94.532041 42.032039 85.251264 37.876953 75 37.876953 z"
    , "m 30.048215,100.10669 c -2.809738,0 -5.486641,0.56961 -7.921271,1.59937 -2.434631,1.02976 -4.627015,2.51991 -6.468321,4.36122 -1.841305,1.8413 -3.331453,4.03369 -4.361215,6.46832 -1.029762,2.43463 -1.599368,5.11153 -1.5993683,7.92127 0,2.80974 0.5696063,5.48664 1.5993683,7.92127 1.029762,2.43463 2.51991,4.62702 4.361215,6.46832 1.841306,1.84131 4.033689,3.33145 6.468321,4.36122 2.43463,1.02976 5.111533,1.59936 7.921271,1.59936 2.809738,0 5.486639,-0.5696 7.921271,-1.59936 2.43463,-1.02977 4.627016,-2.51991 6.468321,-4.36122 1.841306,-1.8413 3.331453,-4.03369 4.361215,-6.46832 1.029763,-2.43463 1.59937,-5.11153 1.59937,-7.92127 0,-2.80974 -0.569607,-5.48664 -1.59937,-7.92127 -1.029762,-2.43463 -2.519909,-4.62702 -4.361215,-6.46832 -1.841305,-1.84131 -4.033691,-3.33146 -6.468321,-4.36122 -2.434632,-1.02976 -5.111533,-1.59937 -7.921271,-1.59937 z M 119.69925,78.534557 c 6.41591,0 12.22454,2.600864 16.42908,6.805402 4.20454,4.204538 6.8054,10.013174 6.8054,16.429081 0,6.41591 -2.60086,12.22455 -6.8054,16.42908 -4.20454,4.20454 -10.01317,6.80541 -16.42908,6.80541 -6.41591,0 -12.22455,-2.60087 -16.42908,-6.80541 -4.204542,-4.20453 -6.805406,-10.01317 -6.805405,-16.42908 0,-6.415907 2.600863,-12.224543 6.805405,-16.429081 4.20453,-4.204538 10.01317,-6.805402 16.42908,-6.805402 z M 49.367379,1.2589232 c -13.424278,0 -25.57768,5.4411847 -34.375013,14.2385188 C 6.195033,24.294775 0.75384823,36.448177 0.75384692,49.872455 0.75384561,63.296734 6.195033,75.450137 14.992366,84.247468 c 8.797333,8.797331 20.950733,14.238523 34.375013,14.238523 13.424279,0 25.577683,-5.441179 34.375012,-14.238523 8.797345,-8.79733 14.238523,-20.950734 14.238523,-34.375013 0,-13.424279 -5.441191,-25.57768 -14.238523,-34.375013 C 74.945061,6.7001092 62.791658,1.2589232 49.367379,1.2589232 Z"];

const multipathSvg = Snap("#multipath");
const multipath = multipathSvg.select("#jsmultipath");

let mpindex = 0;

const multipathAnimate = function () {
    let target = multicurves[mpindex];

    multipath.animate({
        d: target
    }, 2000, mina.elastic, multipathAnimate);
    mpindex++;
    mpindex %= multicurves.length;
};

multipathAnimate();
